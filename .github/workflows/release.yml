name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
    
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
    
    - name: Check Cargo.toml version matches tag
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        CARGO_VERSION="v$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "actor-core") | .version')"
        if [ "$VERSION" != "$CARGO_VERSION" ]; then
          echo "Version mismatch: Tag $VERSION != Cargo.toml $CARGO_VERSION"
          exit 1
        fi
    
    - name: Run full test suite
      run: |
        cargo test -p actor-core --all-features
        cargo test -p actor-core --test '*' --all-features
    
    - name: Run benchmarks
      run: cargo bench -p actor-core --all-features
    
    - name: Check documentation
      run: cargo doc -p actor-core --all-features --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"
    
    - name: Run security audit
      run: |
        cargo install cargo-audit
        cargo audit

  # Build release artifacts
  build:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl pkg-config
    
    - name: Build release
      run: cargo build -p actor-core --release --all-features --target ${{ matrix.target }}
    
    - name: Create artifact directory
      run: mkdir -p artifacts
    
    - name: Copy artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/libactor_core.rlib artifacts/ || true
        cp -r target/${{ matrix.target }}/release/deps artifacts/ || true
    
    - name: Copy artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Copy-Item "target/${{ matrix.target }}/release/actor_core.lib" "artifacts/" -ErrorAction SilentlyContinue
        Copy-Item "target/${{ matrix.target }}/release/deps" "artifacts/" -Recurse -ErrorAction SilentlyContinue
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: actor-core-${{ matrix.target }}
        path: artifacts/

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Generate changelog
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Release $VERSION" > CHANGELOG_RELEASE.md
        echo "" >> CHANGELOG_RELEASE.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          # Get commit messages since last tag
          git log --pretty=format:"- %s" $PREV_TAG..HEAD >> CHANGELOG_RELEASE.md
        else
          echo "## Initial Release" >> CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          echo "This is the initial release of actor-core." >> CHANGELOG_RELEASE.md
        fi
        
        echo "" >> CHANGELOG_RELEASE.md
        echo "## Features" >> CHANGELOG_RELEASE.md
        echo "" >> CHANGELOG_RELEASE.md
        echo "- Character stat aggregation and management system" >> CHANGELOG_RELEASE.md
        echo "- Modular subsystem architecture" >> CHANGELOG_RELEASE.md
        echo "- Multi-layer caching system" >> CHANGELOG_RELEASE.md
        echo "- Performance monitoring and profiling" >> CHANGELOG_RELEASE.md
        echo "- Feature-gated dependencies for optimal builds" >> CHANGELOG_RELEASE.md
        echo "" >> CHANGELOG_RELEASE.md
        echo "## Performance" >> CHANGELOG_RELEASE.md
        echo "" >> CHANGELOG_RELEASE.md
        
        # Add benchmark results if available
        cargo bench -p actor-core --all-features > bench_results.txt 2>&1 || true
        if [ -s bench_results.txt ]; then
          echo "### Benchmark Results" >> CHANGELOG_RELEASE.md
          echo "\`\`\`" >> CHANGELOG_RELEASE.md
          tail -20 bench_results.txt >> CHANGELOG_RELEASE.md
          echo "\`\`\`" >> CHANGELOG_RELEASE.md
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Create release archives
      run: |
        cd release-artifacts
        for dir in */; do
          if [ -d "$dir" ]; then
            tar -czf "${dir%/}.tar.gz" -C "$dir" .
            rm -rf "$dir"
          fi
        done
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body_path: CHANGELOG_RELEASE.md
        files: release-artifacts/*
        draft: false
        prerelease: ${{ contains(github.event.inputs.version || github.ref_name, 'alpha') || contains(github.event.inputs.version || github.ref_name, 'beta') || contains(github.event.inputs.version || github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io (if configured)
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: github.repository == 'your-org/chaos-backend-service' && !contains(github.event.inputs.version || github.ref_name, 'alpha') && !contains(github.event.inputs.version || github.ref_name, 'beta')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev
    
    - name: Publish to crates.io
      run: |
        if [ -z "$CRATES_IO_TOKEN" ]; then
          echo "Error: CRATES_IO_TOKEN secret is not configured in repository settings"
          echo "Please add the CRATES_IO_TOKEN secret to your repository settings"
          exit 1
        fi
        cargo publish -p actor-core
      env:
        # Note: CRATES_IO_TOKEN secret must be configured in repository settings
        CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # Post-release tasks
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create post-release issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = "${{ github.event.inputs.version || github.ref_name }}";
          const title = `Post-release tasks for ${version}`;
          const body = `
          ## Post-release Checklist for ${version}
          
          **Release Date**: ${new Date().toISOString().split('T')[0]}
          **Version**: ${version}
          
          ### Documentation Updates
          - [ ] Update README.md with new version info
          - [ ] Update CHANGELOG.md with detailed changes
          - [ ] Review and update API documentation
          - [ ] Update migration guides if needed
          
          ### Communication
          - [ ] Announce release in Discord/Slack
          - [ ] Update project status
          - [ ] Notify dependent projects
          
          ### Monitoring
          - [ ] Monitor for any issues in the first 24 hours
          - [ ] Check download/usage metrics
          - [ ] Review any user feedback
          
          ### Next Steps
          - [ ] Plan next release cycle
          - [ ] Update project roadmap
          - [ ] Close resolved issues
          
          /label release,post-release
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['release', 'post-release'],
            assignees: [context.actor]
          });
