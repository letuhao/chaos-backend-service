# API Gateway Configuration
# Main configuration file for the API Gateway service

# Server Configuration
server:
  host: "0.0.0.0"
  port: 8080
  workers: 4
  max_connections: 10000
  keep_alive: 30
  timeout: 30

# Logging Configuration
logging:
  level: "info"
  format: "json"
  file: "logs/api-gateway.log"
  max_size: "100MB"
  max_files: 10
  compress: true

# Metrics Configuration
metrics:
  enabled: true
  port: 9090
  path: "/metrics"
  interval: 30

# Health Check Configuration
health:
  enabled: true
  path: "/health"
  interval: 10
  timeout: 5

# Service Discovery Configuration
service_discovery:
  type: "consul"  # consul, kubernetes, static
  consul:
    host: "localhost"
    port: 8500
    datacenter: "dc1"
    service_name: "api-gateway"
    check_interval: "10s"
    check_timeout: "3s"
  
  kubernetes:
    namespace: "chaos-world"
    label_selector: "app=chaos-world"
  
  static:
    services:
      - name: "user-management"
        host: "localhost"
        port: 8081
        health_check: "/health"
      - name: "chaos-backend"
        host: "localhost"
        port: 8082
        health_check: "/health"
      - name: "inventory-service"
        host: "localhost"
        port: 8083
        health_check: "/health"
      - name: "chat-service"
        host: "localhost"
        port: 8084
        health_check: "/health"
      - name: "guild-service"
        host: "localhost"
        port: 8085
        health_check: "/health"
      - name: "world-service"
        host: "localhost"
        port: 8086
        health_check: "/health"
      - name: "matchmaking-service"
        host: "localhost"
        port: 8087
        health_check: "/health"
      - name: "event-service"
        host: "localhost"
        port: 8088
        health_check: "/health"
      - name: "content-management-service"
        host: "localhost"
        port: 8089
        health_check: "/health"
      - name: "notification-service"
        host: "localhost"
        port: 8090
        health_check: "/health"
      - name: "payment-service"
        host: "localhost"
        port: 8091
        health_check: "/health"
      - name: "anti-cheat-service"
        host: "localhost"
        port: 8092
        health_check: "/health"
      - name: "analytics-service"
        host: "localhost"
        port: 8093
        health_check: "/health"

# Routing Configuration
routing:
  default_timeout: 30
  retry_attempts: 3
  retry_delay: 100
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout: 30
    half_open_max_calls: 3

  routes:
    # Health and Status Routes
    - path: "/health"
      methods: ["GET"]
      handler: "health"
      timeout: 5
    
    - path: "/status"
      methods: ["GET"]
      handler: "status"
      timeout: 5
    
    - path: "/metrics"
      methods: ["GET"]
      handler: "metrics"
      timeout: 10

    # User Management Routes
    - path: "/api/v1/auth/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "user-management"
      timeout: 30
      auth_required: false
    
    - path: "/api/v1/users/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "user-management"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # Game Logic Routes
    - path: "/api/v1/game/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "chaos-backend"
      timeout: 60
      auth_required: true
      roles: ["user", "admin"]
      priority: "high"

    # Inventory Routes
    - path: "/api/v1/inventory/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "inventory-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # Chat Routes
    - path: "/api/v1/chat/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "chat-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]
      websocket: true

    # Guild Routes
    - path: "/api/v1/guilds/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "guild-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # World Routes
    - path: "/api/v1/world/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "world-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # Matchmaking Routes
    - path: "/api/v1/matchmaking/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "matchmaking-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # Event Routes
    - path: "/api/v1/events/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "event-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]

    # Content Management Routes
    - path: "/api/v1/content/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "content-management-service"
      timeout: 30
      auth_required: true
      roles: ["admin", "moderator"]

    # Notification Routes
    - path: "/api/v1/notifications/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "notification-service"
      timeout: 30
      auth_required: true
      roles: ["user", "admin"]
      websocket: true

    # Payment Routes
    - path: "/api/v1/payments/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "payment-service"
      timeout: 60
      auth_required: true
      roles: ["user", "admin"]
      priority: "high"

    # Anti-Cheat Routes
    - path: "/api/v1/anti-cheat/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "anti-cheat-service"
      timeout: 30
      auth_required: true
      roles: ["admin", "moderator"]

    # Analytics Routes
    - path: "/api/v1/analytics/*"
      methods: ["GET", "POST", "PUT", "DELETE"]
      service: "analytics-service"
      timeout: 30
      auth_required: true
      roles: ["admin", "analyst"]

# Authentication Configuration
auth:
  jwt:
    secret: "your-jwt-secret-key-change-in-production"
    algorithm: "HS256"
    expiration: 3600  # 1 hour
    refresh_expiration: 86400  # 24 hours
    issuer: "chaos-world-api-gateway"
    audience: "chaos-world-client"
  
  oauth2:
    enabled: false
    providers:
      google:
        client_id: ""
        client_secret: ""
        redirect_uri: ""
      discord:
        client_id: ""
        client_secret: ""
        redirect_uri: ""
      steam:
        client_id: ""
        client_secret: ""
        redirect_uri: ""
  
  api_keys:
    enabled: true
    header_name: "X-API-Key"
    keys:
      - key: "dev-api-key-123"
        name: "Development"
        permissions: ["read", "write"]
        expires_at: "2025-12-31T23:59:59Z"
      - key: "admin-api-key-456"
        name: "Admin"
        permissions: ["read", "write", "admin"]
        expires_at: "2025-12-31T23:59:59Z"

# Rate Limiting Configuration
rate_limiting:
  enabled: true
  redis:
    host: "localhost"
    port: 6379
    database: 0
    password: ""
    pool_size: 10
  
  rules:
    - name: "global"
      limit: 1000
      window: 60  # seconds
      burst: 100
    
    - name: "auth"
      limit: 10
      window: 60
      burst: 5
      paths: ["/api/v1/auth/*"]
    
    - name: "game"
      limit: 100
      window: 60
      burst: 20
      paths: ["/api/v1/game/*"]
    
    - name: "chat"
      limit: 200
      window: 60
      burst: 50
      paths: ["/api/v1/chat/*"]
    
    - name: "payment"
      limit: 20
      window: 60
      burst: 5
      paths: ["/api/v1/payments/*"]
    
    - name: "admin"
      limit: 500
      window: 60
      burst: 100
      roles: ["admin"]

# Security Configuration
security:
  cors:
    enabled: true
    origins: ["http://localhost:3000", "https://chaos-world.com"]
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    headers: ["Authorization", "Content-Type", "X-API-Key"]
    credentials: true
    max_age: 86400
  
  headers:
    - name: "X-Content-Type-Options"
      value: "nosniff"
    - name: "X-Frame-Options"
      value: "DENY"
    - name: "X-XSS-Protection"
      value: "1; mode=block"
    - name: "Strict-Transport-Security"
      value: "max-age=31536000; includeSubDomains"
    - name: "Referrer-Policy"
      value: "strict-origin-when-cross-origin"
  
  ip_whitelist:
    enabled: false
    ips: []
  
  ip_blacklist:
    enabled: true
    ips: []
    auto_ban: true
    ban_duration: 3600  # seconds

# Load Balancing Configuration
load_balancing:
  algorithm: "round_robin"  # round_robin, least_connections, weighted_round_robin, ip_hash
  health_check:
    enabled: true
    interval: 30
    timeout: 5
    path: "/health"
    success_threshold: 2
    failure_threshold: 3
  
  sticky_sessions:
    enabled: false
    cookie_name: "session_id"
    max_age: 3600

# Caching Configuration
caching:
  enabled: true
  redis:
    host: "localhost"
    port: 6379
    database: 1
    password: ""
    pool_size: 10
  
  ttl:
    default: 300  # 5 minutes
    auth: 60      # 1 minute
    user: 600     # 10 minutes
    game: 30      # 30 seconds
    inventory: 300 # 5 minutes
    chat: 60      # 1 minute
    guild: 600    # 10 minutes
    world: 30     # 30 seconds
    matchmaking: 60 # 1 minute
    events: 300   # 5 minutes
    content: 1800 # 30 minutes
    notifications: 60 # 1 minute
    payments: 0   # no cache
    anti_cheat: 0 # no cache
    analytics: 0  # no cache

# Monitoring Configuration
monitoring:
  tracing:
    enabled: true
    jaeger:
      endpoint: "http://localhost:14268/api/traces"
      service_name: "api-gateway"
      sample_rate: 0.1
  
  metrics:
    prometheus:
      enabled: true
      port: 9090
      path: "/metrics"
    
    custom_metrics:
      - name: "request_duration"
        type: "histogram"
        labels: ["method", "path", "status"]
      - name: "request_count"
        type: "counter"
        labels: ["method", "path", "status"]
      - name: "active_connections"
        type: "gauge"
        labels: []
      - name: "rate_limit_hits"
        type: "counter"
        labels: ["rule", "ip"]
      - name: "circuit_breaker_state"
        type: "gauge"
        labels: ["service", "state"]

# Development Configuration
development:
  hot_reload: true
  debug: true
  mock_services: false
  log_requests: true
  log_responses: false
  log_headers: false
  log_body: false

# Production Configuration
production:
  hot_reload: false
  debug: false
  mock_services: false
  log_requests: false
  log_responses: false
  log_headers: false
  log_body: false
  minify_responses: true
  compress_responses: true
